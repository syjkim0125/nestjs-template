// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export enum UserStatus {
  ACTIVE = 0,
  DELETED = 1,
  PENDING = 2,
  UNRECOGNIZED = -1,
}

export interface Empty {
}

export interface FindOneUserDto {
  id: string;
}

export interface PaginationDto {
  page: number;
  skip: number;
}

export interface Users {
  users: User[];
}

export interface FindOrCreateUserRequest {
  googleId: string;
  email: string;
  name: string;
}

export interface User {
  id: string;
  googleId: string;
  email: string;
  name: string;
  /** ACTIVE, DELETED, ... */
  status: UserStatus;
}

export interface SoftDeleteUserRequest {
  userId: string;
}

export interface SoftDeleteUserResponse {
  success: boolean;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  findOrCreateUser(request: FindOrCreateUserRequest): Observable<User>;

  softDeleteUser(request: SoftDeleteUserRequest): Observable<SoftDeleteUserResponse>;

  findAllUsers(request: Empty): Observable<Users>;

  findOneUser(request: FindOneUserDto): Observable<User>;

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;
}

export interface UserServiceController {
  findOrCreateUser(request: FindOrCreateUserRequest): Promise<User> | Observable<User> | User;

  softDeleteUser(
    request: SoftDeleteUserRequest,
  ): Promise<SoftDeleteUserResponse> | Observable<SoftDeleteUserResponse> | SoftDeleteUserResponse;

  findAllUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  findOneUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOrCreateUser", "softDeleteUser", "findAllUsers", "findOneUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryUsers"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
